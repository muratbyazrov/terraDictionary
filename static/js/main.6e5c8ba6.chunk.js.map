{"version":3,"sources":["components/header/Header.js","components/counter/Counter.js","components/task/Task.js","components/word-item/WordItem.js","components/word-list/WordList.js","components/terra-window/TerraWin.js","components/app/App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Counter","ratingColorStatus","rating","props","color","this","style","backgroundColor","Task","taskWord","taskLang","ru","en","WordItem","state","classToogle","onCheckWord","key","a","setNewState","successCounter","errorCounter","id","setState","setTimeout","toSpeaCurrentWord","currentWord","listLang","speakFunc","onRun","ratingCounter","onClick","WordList","wordsArr","elements","map","item","TerraWin","hideStartWin","start","App","successes","errors","arr","createNewTaskWord","random","Math","floor","data","length","createWordsArr","includes","push","sort","toSpeakTaskWord","speak","text","message","SpeechSynthesisUtterance","lang","window","speechSynthesis","newRating","console","log","toFixed","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6e5c8ba6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Header.css'\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <h1 className='header'>Выберите правильный перевод</h1>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Counter.css';\r\n\r\n\r\nexport default class Counter extends Component {\r\n    \r\n\r\n    ratingColorStatus = () => {\r\n        const {rating} = this.props;\r\n        if(rating < 3) {\r\n            this.color = 'red'\r\n        } else if (rating > 3 && rating < 5) {\r\n            this.color = 'orange'\r\n        } else if (rating >= 5 && rating < 7.5) {\r\n            this.color = 'yellow'\r\n        } else if (rating >= 7.5) {\r\n            this.color = 'Lime'\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const {rating} = this.props;\r\n        this.ratingColorStatus();\r\n        return (\r\n            <div className='counter' style={{backgroundColor: `${this.color}`}} >{rating}</div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './Task.css';\r\nimport Counter from '../counter/Counter';\r\n\r\nexport default class Task extends Component {\r\n\r\n    render() {\r\n        const { taskWord, taskLang, rating } = this.props;\r\n        return (\r\n            <div className='task'>\r\n                <h2 className='task__title'>{taskLang ? taskWord.ru : taskWord.en}</h2>\r\n                <Counter\r\n                    rating={rating}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './WordItem.css'\r\n\r\n\r\nexport default class WordItem extends Component {\r\n\r\n    state = {\r\n        classToogle: \"btn btn-outline-info\",\r\n    }\r\n\r\n    onCheckWord = async (key) => {\r\n        const { setNewState, successCounter, errorCounter, taskWord } = this.props;\r\n        if (key === taskWord.id) {\r\n            await successCounter();\r\n            this.setState({\r\n                classToogle: \"btn btn-success\"\r\n            })\r\n        } else {\r\n            await errorCounter();\r\n            this.setState({\r\n                classToogle: \"btn btn-danger\"\r\n            })\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.setState({\r\n                classToogle: \"btn btn-outline-info\"\r\n            })\r\n        }, 500);\r\n\r\n        setTimeout(() => {\r\n            setNewState();\r\n        }, 1000);\r\n    }\r\n\r\n\r\n    toSpeaCurrentWord = () => {\r\n        const { currentWord, listLang, speakFunc } = this.props;\r\n        if (!listLang) {\r\n            speakFunc(currentWord.en)\r\n        }\r\n    }\r\n\r\n\r\n    onRun = async (key) => {\r\n        await this.onCheckWord(key);\r\n        const { ratingCounter } = this.props;\r\n        await ratingCounter();\r\n        this.toSpeaCurrentWord();\r\n    }\r\n\r\n\r\n    render() {\r\n        const { listLang, currentWord } = this.props;\r\n        return (\r\n            <button onClick={() => this.onRun(currentWord.id)} className={this.state.classToogle}>\r\n                {listLang ? currentWord.ru : currentWord.en}\r\n            </button>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './WordList.css';\r\nimport WordItem from '../word-item/WordItem';\r\n\r\n\r\nexport default class WordList extends Component {\r\n  \r\n    render() {\r\n        const { setNewState, taskWord, wordsArr, listLang, speakFunc, successCounter, errorCounter, ratingCounter } = this.props;\r\n        \r\n        const elements = wordsArr.map((item) => {\r\n            return <WordItem\r\n                key={item.id}\r\n                setNewState={setNewState}\r\n                taskWord={taskWord}\r\n                currentWord={item}\r\n                listLang={listLang}\r\n                speakFunc={speakFunc}\r\n                successCounter={successCounter}\r\n                errorCounter={errorCounter}\r\n                ratingCounter={ratingCounter}\r\n\r\n            />\r\n        })\r\n        return <div className='word-list'>{elements}</div> \r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './TerraWin.css'\r\n\r\nexport default class TerraWin extends Component {\r\n    \r\n    state = {\r\n        className: 'terra'\r\n    }\r\n    \r\n    hideStartWin = () => {\r\n        this.setState({\r\n            className: 'terra-hide'\r\n        })\r\n    }\r\n    \r\n    start = () => {\r\n        const {setNewState} = this.props;\r\n        this.hideStartWin()\r\n        setNewState();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.state.className}>\r\n                <div className='terra__logo'></div>\r\n                <h1 className='terra__title'>terraDictionary</h1>\r\n                <button className='btn btn-info terra__button' onClick={ () => this.start() }>Учиться!</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Header from '../header/Header';\nimport Task from '../task/Task';\nimport WordList from '../word-list/WordList';\nimport data from '../../data/murat-dictionary.json';\nimport TerraWin from '../terra-window/TerraWin';\n\n\nexport default class App extends Component {\n\n  state = {\n    taskWord: {},\n    wordsArr: [],\n    taskLang: false,\n    listLang: !this.setState.taskLang,\n    successes: 0,\n    errors: 0,\n    rating: 0\n  }\n\n  arr = [];\n\n\n  createNewTaskWord = () => {\n    const random = Math.floor(Math.random() * Math.floor(data.length));\n    const taskWord = data[random]\n    this.arr = [taskWord]\n    return taskWord;\n  }\n\n  createWordsArr = () => {\n    while (this.arr.length <= 5) {\n      const random = Math.floor(Math.random() * Math.floor(data.length));\n      if (!this.arr.includes(data[random])) {\n        this.arr.push(data[random])\n      }\n    }\n    this.arr.sort(() => Math.random() - 0.5) // перемешивает порядок слов\n    return this.arr\n  }\n\n  setNewState = async () => {\n    const taskWord = this.createNewTaskWord();\n    const arr = this.createWordsArr();\n    const random = Math.random();\n    const taskLang = random > 0.5 ? false : true\n\n    await this.setState({\n      taskWord: taskWord,\n      wordsArr: arr,\n      taskLang: taskLang,\n      listLang: !taskLang,\n    })\n\n    this.toSpeakTaskWord();\n  }\n\n  speak = (text) => {\n    const message = new SpeechSynthesisUtterance();\n    message.lang = \"en-En\";\n    message.text = text;\n    window.speechSynthesis.speak(message);\n  }\n\n  toSpeakTaskWord = () => {\n    if (!this.state.taskLang) {\n      this.speak(this.state.taskWord.en)\n    }\n  }\n\n\n  successCounter = () => {\n    this.setState({\n      successes: this.state.successes + 1\n    })\n  }\n  errorCounter = () => {\n    this.setState({\n      errors: this.state.errors + 1\n    })\n  }\n\n  ratingCounter = () => {\n    let newRating = this.state.successes / (this.state.successes + this.state.errors) * 10;\n    console.log(this.state.successes, this.state.errors);\n    newRating = newRating.toFixed(1);\n    this.setState({\n      rating: newRating\n    })\n  }\n\n\n  render() {\n    return (\n      <>\n        <TerraWin setNewState={this.setNewState}/>\n        <Header className=\"alert alert-success\" />\n        <Task\n          taskWord={this.state.taskWord}\n          setNewState={this.setNewState}\n          taskLang={this.state.taskLang}\n          rating={this.state.rating}\n        />\n        <WordList \n          wordsArr={this.state.wordsArr}\n          setNewState={this.setNewState}\n          taskWord={this.state.taskWord}\n          listLang={this.state.listLang}\n          speakFunc={this.speak}\n          successCounter={this.successCounter}\n          errorCounter={this.errorCounter}\n          ratingCounter={this.ratingCounter}\n          taskLang={this.state.taskLang}\n        />\n      </>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}